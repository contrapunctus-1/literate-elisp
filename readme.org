# -*- encoding:utf-8 Mode: POLY-ORG;  -*- --- 
#+Startup: noindent
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:t
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

[[https://melpa.org/#/literate-elisp][file:https://melpa.org/packages/literate-elisp-badge.svg]]
[[https://stable.melpa.org/#/literate-elisp][file:https://stable.melpa.org/packages/literate-elisp-badge.svg]]
[[https://travis-ci.com/jingtaozf/literate-elisp][file:https://travis-ci.com/jingtaozf/literate-elisp.svg?branch=master]]
[[https://github.com/jingtaozf/literate-elisp/actions][file:https://github.com/jingtaozf/literate-elisp/workflows/Continous%20Integration/badge.svg]]

* Table of Contents                                                   :TOC:
- [[#introduction][Introduction]]
- [[#tutorial][Tutorial]]
  - [[#install-polymode-in-emacs][install Polymode in Emacs]]
  - [[#install-literate-elispel][install literate-elisp.el]]
  - [[#how-to-insert-code-block-quickly][how to insert code block quickly]]
  - [[#load-an-org-file][load an org file]]
  - [[#byte-compile-an-org-file][byte compile an org file]]
  - [[#a-new-code-block-header-argument-load][a new code block header argument ~load~]]
  - [[#how-to-insert-code-block-quickly-1][How to insert code block quickly]]
- [[#demo-routines][demo routines]]
  - [[#a-demo-macro][a demo macro]]
- [[#a-demo-emacs-configuration][a demo Emacs configuration]]
  - [[#a-demo-configuration][a demo configuration]]
  - [[#load-this-org-file-in-emacs][load this org file in .emacs]]
- [[#test][Test]]
  - [[#introduction-1][Introduction]]
  - [[#test-macro-aif][test macro aif]]
  - [[#test-org-mode-configuration][test org mode configuration]]
- [[#copyright-and-license][Copyright and license]]

* Introduction
[[https://github.com/jingtaozf/literate-elisp][literate-elisp]] is an Emacs lisp library to provide an easy way to use [[http://www.literateprogramming.com/][literal programming]] in Emacs lisp.

It extends the Emacs [[https://www.gnu.org/software/emacs/manual/html_node/elisp/How-Programs-Do-Loading.html#How-Programs-Do-Loading][load]] mechanism so Emacs can load org files as lisp source files directly.

The implementation details of [[https://github.com/jingtaozf/literate-elisp][literate-elisp]] is in file [[./literate-elisp.org]] ([[./literate-elisp.pdf][pdf version]]).

This library export an elisp function ~literate-elisp-load~ 
and this function can load elisp codes in all elisp code blocks 
surrounded by ~#+begin_src elisp~ and ~#+end_src~ in an org file directly.

For example, if you have an org file and it contains such elisp code block:
#+BEGIN_EXAMPLE
   ,#+BEGIN_SRC elisp :load yes
   (defun test ()
    (message "this is a test from org file.~%"))
   ,#+END_SRC
#+END_EXAMPLE

Then you can load this org file like this:
#+BEGIN_SRC elisp :load no
(load "~/projects/literate-elisp/literate-elisp.el")
(literate-elisp-load "test.org")
#+END_SRC
Now the elisp function ~test~ is ready to use, 
and you can jump to the definition of ~test~ in the org file by using Emacs library [[https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/find-func.el][find-func]] directly
without tangling them to an elisp file(.el).

You can also open an org file by [[https://polymode.github.io/][polymode]] when edit,which will switch elisp code block to Emacs elisp mode.

So you will have a perfect literate environment which can write elisp codes in an org file, and
load it directly without tangling an org file to an elisp file.
Emacs lisp's source code editing and navigation feature work well to this org file.

This library contains the following files:
- [[./literate-elisp.org]] \\ 
  The implementation and documentation of literate elisp reader.
- [[./literate-elisp.el]] \\
  The tangled codes of literate elisp reader, generated from [[./literate-elisp.org]].
- [[./literate-elisp.pdf]] \\
  The weaved documentation, generated from [[./literate-elisp.org]] by org mode's [[https://orgmode.org/manual/Triggering-publication.html#Triggering-publication][publish feature]].
- [[./readme.org]] \\
  This file contains introduction and demo codes for how to do literate elisp in an org file.
- [[./.travis.yml]] \\
  The config file used by Web service [[https://travis-ci.com/jingtaozf/literate-lisp][travis ci]] to test this library.

* Tutorial
** install Polymode in Emacs
The org file can open as [[https://polymode.github.io/][polymode]],the following Emacs lisp scripts should add in .emacs
#+BEGIN_SRC elisp :load no
(use-package poly-org
    :ensure t)
#+END_SRC
** install literate-elisp.el
#+BEGIN_SRC elisp :load no
(load "~/projects/literate-elisp/literate-elisp.el")
#+END_SRC
** how to insert code block quickly
Please have a look of the section [[./literate-elisp.org#how-to-insert-code-block-in-org-file][How to insert code block in org file]].
** load an org file 

To load an org file, we can use Emacs interactive command ~literate-elisp-load~.

For example, This org file can load directly with the following code.
#+BEGIN_SRC elisp :load no
(literate-elisp-load "readme.org")
#+END_SRC

If you want to load an org file with a Emacs command, please press "Alt-X" and type ~literate-elisp-load-file~. 

If you want to load an org file in batch mode, please use function ~literate-elisp-batch-load~. 
** byte compile an org file
To byte compile an org file to an ~elc~ file, we can use Emacs interactive command ~literate-elisp-byte-compile-file~.
For example, This org file can be compiled with the following code.
#+BEGIN_SRC elisp :load no
(literate-elisp-byte-compile-file "readme.org")
#+END_SRC
Now the target file ~readme.org.elc~ is ready to use.

** a new code block header argument ~load~
There are a lot of different elisp codes occur in one org file, some for function implementation,
some for demo, and some for test, so an [[https://orgmode.org/manual/Structure-of-code-blocks.html][org code block]] [[https://orgmode.org/manual/Code-block-specific-header-arguments.html#Code-block-specific-header-arguments][header argument]] ~load~ to decide to
read them or not should define,and it has the following meanings:
- yes \\
  It means that current code block should load normally, 
  it is the default mode when the header argument ~load~ is not provided.
  #+BEGIN_EXAMPLE
   ,#+BEGIN_SRC elisp :load yes
   (defun a-function-to-load ()
    (message "this function will be loaded by literate-elisp.~%"))
   ,#+END_SRC
  #+END_EXAMPLE
  
- no \\
  It means that current code block should ignore by elisp reader.
  #+BEGIN_EXAMPLE
   ,#+BEGIN_SRC elisp :load no
   (defun a-function-to-ignore ()
    (message "this function will be ingored by literate-elisp.~%"))
   ,#+END_SRC
  #+END_EXAMPLE
- test \\
  It means that current code block should load only when variable ~literate-elisp-test-p~ is true.
  #+BEGIN_EXAMPLE
   ,#+BEGIN_SRC elisp :load test
   (defun a-function-to-test ()
    (message "this function will be loaded by literate-elisp only if literate-elisp-test-p is true.~%"))
   ,#+END_SRC
  #+END_EXAMPLE

** How to insert code block quickly

* demo routines
** a demo macro
As a demo org file, we write a simple demo macro ~aif~ here.

Sometimes we want to use the expression value of ~if~ condition form when it yields non-nil.
That's the purpose of ~aif~ which will bind variable ~it~ to the value of ~if~ condition form.

We will use some common lisp macros, so let's load this library now.
#+BEGIN_SRC elisp
(require 'cl)
#+END_SRC

Let's implement ~if-bind~ firstly,
which can bind the value of ~if~ condition form to any specified variable..
#+BEGIN_SRC elisp
(defmacro if-bind (var test &rest then/else)
  "Anaphoric IF control structure.

VAR (a symbol) will be bound to the primary value of TEST. If
TEST returns a true value then THEN will be executed, otherwise
ELSE will be executed."
  (cl-assert (car then/else)
             (then/else)
             "IF-BIND missing THEN clause.")
  (cl-destructuring-bind (then &optional else)
      then/else
    `(lexical-let ((,var ,test))
       (if ,var ,then ,else))))
#+END_SRC

Now ~aif~ is easy to finish.
#+BEGIN_SRC elisp
(defmacro aif (test then &optional else)
    "Just like IF-BIND but the var is always IT."
    `(if-bind it ,test ,then ,else))
#+END_SRC

You can use it like this
#+BEGIN_SRC elisp :load no
(aif (and (y-or-n-p "Try it")
            10)
    (message "it is %s" it))
#+END_SRC
After loading this org file by function ~literate-elisp-load~,
you can use macro ~aif~ directly in your other elisp files.

* a demo Emacs configuration 
Of course the one purpose of this library is to write Emacs configuration directly in an org file. \\
Here we give a demo configuration and the way to load such org config file.
  
** a demo configuration
***  enable org mode for org files
#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))  
#+END_SRC
** load this org file in .emacs
Then to load routines and configurations in this org file, I add the following codes in my ~.emacs~
#+BEGIN_SRC elisp :load no
(load "~/projects/literate-elisp/literate-elisp.el")
(literate-elisp-load "~/projects/literate-elisp/readme.org")
#+END_SRC
* Test
** Introduction
We use [[https://www.gnu.org/software/emacs/manual/html_node/ert/Introduction.html#Introduction][ERT]] library to define and run tests.
Web service [[https://travis-ci.com/jingtaozf/literate-lisp][travis ci]] will load config file [[./.travis.yml]] to run these tests automatically
every time there is a new git change.
** test macro aif
#+BEGIN_SRC elisp :load test
(ert-deftest literate-demo-aif ()
  "A spec of macro aif."
  (should (equal (aif 10 it 9) 10)))
#+END_SRC
** test org mode configuration
#+BEGIN_SRC elisp :load test
(ert-deftest literate-demo-org-mode ()
  "A spec of macro aif."
  (should (equal (cl-loop for (x . y) in auto-mode-alist
                          if (eq y 'org-mode)
                          return x)
                 "\\.\\(org\\|org_archive\\)$")))
#+END_SRC
* Copyright and license
Code and documentation copyright 2018-2019 Jingtao Xu.

This program is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program.
If not, see http://www.gnu.org/licenses/.
